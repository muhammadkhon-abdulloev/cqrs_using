// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230725115914_AddInitProject")]
    partial class AddInitProject
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValue(new DateTime(2023, 7, 25, 11, 59, 14, 789, DateTimeKind.Utc).AddTicks(6930))
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("CityIdIndex");

                    b.ToTable("city");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("CargoWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("cargo_weight");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValue(new DateTime(2023, 7, 25, 11, 59, 14, 790, DateTimeKind.Utc).AddTicks(8090))
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("PickupDate")
                        .HasColumnType("date")
                        .HasColumnName("pickup_date");

                    b.Property<string>("ReceiverAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("receiver_address");

                    b.Property<int>("ReceiverCityId")
                        .HasColumnType("integer")
                        .HasColumnName("receiver_city_id");

                    b.Property<string>("SenderAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sender_address");

                    b.Property<int>("SenderCityId")
                        .HasColumnType("integer")
                        .HasColumnName("sender_city_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("OrderIdIndex");

                    b.HasIndex("ReceiverCityId");

                    b.HasIndex("SenderCityId");

                    b.ToTable("order");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.City", "ReceiverCity")
                        .WithMany("ReceiverOrders")
                        .HasForeignKey("ReceiverCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.City", "SenderCity")
                        .WithMany("SenderOrders")
                        .HasForeignKey("SenderCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceiverCity");

                    b.Navigation("SenderCity");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Navigation("ReceiverOrders");

                    b.Navigation("SenderOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
